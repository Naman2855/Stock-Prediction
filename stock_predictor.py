# -*- coding: utf-8 -*-
"""Stock predictor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TcUXSsvqqz5ZCZ1kRn9U426pQrD-ddk2
"""

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

try:
    # Step 1: Get stock ticker from user
    ticker = input("Enter stock ticker symbol (e.g., AAPL): ").upper()

    # Step 2: Fetch historical data (last 1000 days)
    data = yf.download(ticker, period="1000d")

    # Validate data
    if data.empty or 'Close' not in data.columns:
        raise ValueError("No valid stock data found. Please check the ticker symbol.")

    # Step 3: Feature engineering
    data['lag_1'] = data['Close'].shift(1)
    data['ma_5'] = data['Close'].rolling(window=5).mean()
    data['ma_10'] = data['Close'].rolling(window=10).mean()
    data = data.dropna()

    # Step 4: Split features and target
    X = data[['lag_1', 'ma_5', 'ma_10']]
    y = data['Close']

    # Step 5: Train-test split (80%-20%), preserving time order
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

    # Step 6: Train models
    lr = LinearRegression().fit(X_train, y_train)
    ridge = Ridge(alpha=2.0).fit(X_train, y_train)
    lasso = Lasso(alpha=0.1).fit(X_train, y_train)
    elastic_net = ElasticNet(alpha=0.1, l1_ratio=0.5).fit(X_train, y_train)

    # Step 7: Predict on test set
    y_pred_lr = lr.predict(X_test)
    y_pred_ridge = ridge.predict(X_test)
    y_pred_lasso = lasso.predict(X_test)
    y_pred_enet = elastic_net.predict(X_test)

    # Step 8: Evaluate models
    print(f"Linear Regression R^2: {r2_score(y_test, y_pred_lr):.4f}")
    print(f"Ridge Regression R^2: {r2_score(y_test, y_pred_ridge):.4f}")
    print(f"Lasso Regression R^2: {r2_score(y_test, y_pred_lasso):.4f}")
    print(f"Elastic Net R^2: {r2_score(y_test, y_pred_enet):.4f}")

    # Step 9: Predict next day closing price using Ridge (best regularized model)
    latest = data.iloc[-1:][['lag_1', 'ma_5', 'ma_10']]
    next_day_pred = ridge.predict(latest)
    print(f"üìå Predicted NEXT closing price (Ridge): ${next_day_pred.item():.2f}")

    # Step 10: Plot actual vs predicted for Ridge and Linear models
    plt.figure(figsize=(12,6))
    plt.plot(y_test.index, y_test, label='Actual', linewidth=2)
    plt.plot(y_test.index, y_pred_lr, label='Linear Predicted', linestyle='--')
    plt.plot(y_test.index, y_pred_ridge, label='Ridge Predicted', linestyle=':')
    plt.plot(y_test.index, y_pred_lasso, label='Lasso Predicted', linestyle='-.')
    plt.plot(y_test.index, y_pred_enet, label='Elastic Net Predicted', linestyle='-')
    plt.legend()
    plt.title(f"{ticker} Stock Price Prediction")
    plt.xlabel("Date")
    plt.ylabel("Price ($)")
    plt.grid(True)
    plt.tight_layout()
    plt.show()

except Exception as e:
    print(f"‚ùå Error: {e}")
    print("Please enter a valid stock ticker like AAPL, MSFT, or TSLA.")